{"name":"BaseHash","tagline":"Extendible base hashing in Python.","body":"BaseHash\r\n========\r\n\r\nBaseHash is a small library for creating reversible obfuscated identifier hashes\r\nto a given base and length. The project is based on the GO library, [PseudoCrypt][pc]\r\nby [Kevin Burns][kb]. The library is extendible to use custom alphabets and other\r\nbases.\r\n\r\nThe library uses golden primes and the [Baillie-PSW][bp] primality test for hashing \r\nto `n` length. From testing, I have gotten `base62` up to `171` in length.\r\n\r\n```\r\nMaximum number is Base^Length - 1.\r\n-> 62^171 - 1 or 315485137315301582773830923281251564555089304044116975095028710\r\n\t\t\t\t 008180170985809814948409129256031320171601473029340987051144213\r\n\t\t\t\t 425607224233134700199050224309707192084206558324823774511143549\r\n\t\t\t\t 765069844412467187455459156942237963528166277256376429656681225\r\n\t\t\t\t 8180788198965409784329587392583208081351811265973977087\r\n```\r\n\r\nEncode\r\n------\r\n```python\r\nfrom basehash import base62\r\n\r\nencoded = base62.encode(2013)\r\ndecoded = base62.decode('WT')\r\n\r\nprint encoded, decoded\r\n```\r\n```\r\nWT 2013\r\n```\r\n\r\nHash\r\n----\r\n```python\r\nfrom basehash import base62\r\n\r\nhashed   = base62.hash(2013, 8)\r\nunhashed = base62.unhash('6LhOma5b')\r\n\r\nprint hashed, unhashed\r\n```\r\n```\r\n6LhOma5b 2013\r\n```\r\n\r\nGenerating your own primes\r\n--------------------------\r\nThe default primes are generated using the golden ratio, `1.618033988749894848`\r\nbut this can be changed with `basehash.base.GENERATOR`\r\n\r\n```python\r\n# Generate primes, default golden ratio.\r\nGENERATOR = 1.618033988749894848 # Change to whatever you'd like\r\n```\r\n\r\nMaximum number while hashing\r\n----------------------------\r\nThere is a maximum number while hashing with any given base. To find out what\r\nthis number is, we use the `Base^Length - 1` inside the `base_maximum(length)`\r\nmethod\r\n\r\n```python\r\nfrom basehash import base36\r\n\r\nprint base36.maximum(12)\r\n```\r\n```\r\n4738381338321616895\r\n```\r\n\r\nSo with the max number for `base36` at length `12` as `4738381338321616895` we\r\nget the following:\r\n\r\n```python\r\nfrom basehash import base36\r\n\r\nhash = base36.hash(4738381338321616895, 12)\r\n# 'DR10828P4CZP'\r\n\r\nhash = base36.hash(4738381338321616896, 12)\r\n# ValueError: Number is too large for given length. Maximum is 36^12 - 1.\r\n```\r\n\r\nExtending\r\n---------\r\n\r\n```python\r\nfrom basehash.base import *\r\n\r\nALPHA = tuple('24680ACEGIKMOQSUWYbdfhjlnprtvxz')\r\n\r\n# Length 'base' is 31 -> len(ALPHA)\r\n\r\ndef encode(num):\r\n\treturn base_encode(num, ALPHA)\r\n\r\ndef decode(key):\r\n\treturn base_decode(key, ALPHA)\r\n\r\ndef hash(num, length=HASH_LENGTH):\r\n\treturn base_hash(num, length, ALPHA)\r\n\r\ndef unhash(key):\r\n\treturn base_unhash(key, ALPHA)\r\n\r\ndef maximum(length=HASH_LENGTH):\r\n\treturn base_maximum(len(ALPHA), length)\r\n```\r\n\r\n[pc]: https://github.com/KevBurnsJr/pseudocrypt\r\n[kb]: https://github.com/KevBurnsJr\r\n[bp]: http://en.wikipedia.org/wiki/Baillie-PSW_primality_test\r\n","google":"UA-42065331-1","note":"Don't delete this file! It's used internally to help with page regeneration."}